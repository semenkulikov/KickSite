"""
Django's settings for Django project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from platform import system
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-66^@$c&62w)t%g6)ew10dvtd77%cve#v6+c-ry%f6spk%v^juh'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if system() == "Windows" else True

ALLOWED_HOSTS = ['127.0.0.1', '0.0.0.0', 'example.com','localhost','5.35.91.173','starkinc.shop']

# Application definition

INSTALLED_APPS = [
    'daphne',
    'channels',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'webpack_loader',

    # User's Apps
    'ServiceApp',
    'ProxyApp',
    'TwitchApp',
    'StatsApp'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'ServiceApp.middleware.TransactionMiddleware',
]

ROOT_URLCONF = 'Django.urls'

TEMPLATE_DIR = BASE_DIR / "templates"
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION = 'Django.wsgi.application'
ASGI_APPLICATION = 'Django.asgi.application'

CHANNELS_LAYERS = {
  'default': {
    'BACKEND': 'channels_redis.core.RedisChannelLayer',
    'CONFIG': {
        "hosts": [
          'redis://<PASSWORD>@<IP>:6379'
        ],
    },

    # 'BACKEND': 'channels.layers.InMemoryChannelLayer'
  }
}
if True:
    CHANNELS_LAYERS = {
        'default': {
            'BACKEND': 'channels.layers.InMemoryChannelLayer'
        }
    }


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': "django.db.backends.postgresql",
        'NAME': "<database-name>",
        'USER': "<user>",
        'PASSWORD': "<password>",
        'HOST': "127.0.0.1",
        'PORT': "5432"
    }
}

if True: #DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'database', 'db.sqlite3'),
            'OPTIONS': {
                'timeout': 20,  # Database lock timeout in seconds
            },
            'CONN_MAX_AGE': 600,  # Keep connections alive for 10 minutes
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

DATA_UPLOAD_MAX_MEMORY_SIZE = 26214400  # 25 Mb

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

# BASE_DIR = Root\Django\Path
STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATICFILES_DIRS = [str(path / 'static') for path in BASE_DIR.iterdir() if path.is_dir() and (path / 'static').exists()]

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

GUNICORN_WORKERS = 4
GUNICORN_PORT = 8000

CSRF_TRUSTED_ORIGINS = [
    "http://127.0.0.1/",
    "http://127.0.0.1:8000/login",
    "https://example.com",
    "https://example.com/login",
    "http://localhost",
    "http://localhost/login",
    "http://localhost:8000/login",
    "http://5.35.91.173",
    "http://5.35.91.173:8000",
    "http://5.35.91.173/login",
    "http://5.35.91.173:8000/login",
    "http://starkinc.shop",
    "https://starkinc.shop",
    # Add any additional origins you trust here
]


LOGIN_URL = "login"

SOCKETS_DIR = dict()

AUTH_USER_MODEL = 'ServiceApp.User'

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'ServiceApp.Validators.twitch_token': {
            'handlers': ['file', 'console'] if DEBUG else ['file'],
            'level': 'INFO',
            'propagate': True,
        },
        'TwitchApp.chat_manager': {
            'handlers': ['file', 'console'] if DEBUG else ['file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}
