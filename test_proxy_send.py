#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ HTTP –ø—Ä–æ–∫—Å–∏
"""

import asyncio
import logging
import cloudscraper
import urllib.parse
import time
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("proxy_test")

# –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–∫—Å–∏ –æ—Ç Pavel
PROXY_LIST = [
    "pr.lunaproxy.com:12233:user-test1_S4bwJ:Test123",
    "pr.lunaproxy.com:12233:user-test1_S4bwJ-sessid-allhrbkjgtbo7o7phqo-sesstime-90:Test123",
    "pr.lunaproxy.com:12233:user-test1_S4bwJ-sessid-allftfyoyp2k8kx4no4-sesstime-90:Test123",
]

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
TEST_TOKEN = "227163000|1vy337VnGuWerycaB3Dcg9DZYf5OQdWNloa0jUUQ"
TEST_CHANNEL = "dwolf"
TEST_MESSAGE = "–¢–µ—Å—Ç –ø—Ä–æ–∫—Å–∏"

def convert_proxy_format(proxy_str):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ host:port:user:pass –≤ HTTP —Ñ–æ—Ä–º–∞—Ç
    """
    try:
        parts = proxy_str.split(':')
        if len(parts) == 4:
            host, port, username, password = parts
            return f"http://{username}:{password}@{host}:{port}"
        else:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏: {proxy_str}")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–∫—Å–∏ {proxy_str}: {e}")
        return None

async def test_proxy_send(proxy_str, token, channel, message):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
    """
    logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxy_str}")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –≤ HTTP —Ñ–æ—Ä–º–∞—Ç
    http_proxy = convert_proxy_format(proxy_str)
    if not http_proxy:
        return False
    
    logger.info(f"HTTP –ø—Ä–æ–∫—Å–∏: {http_proxy}")
    
    # –ü–∞—Ä—Å–∏–º —Ç–æ–∫–µ–Ω
    if not token or '|' not in token:
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞")
        return False
    
    user_id, token_part = token.split('|', 1)
    session_raw = token
    xsrf_token = token_part
    session_decoded = urllib.parse.unquote(session_raw)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—É–∫–∏
    cookies = {
        'session_token': session_raw,
        'XSRF-TOKEN': xsrf_token
    }
    
    # –°–æ–∑–¥–∞–µ–º scraper —Å –ø—Ä–æ–∫—Å–∏
    scraper = cloudscraper.create_scraper()
    scraper.proxies = {
        'http': http_proxy,
        'https': http_proxy
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É
    try:
        logger.info(f"–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ: {channel}")
        channel_response = scraper.get(
            f"https://kick.com/api/v2/channels/{channel}",
            cookies=cookies,
            headers={
                'Authorization': f'Bearer {session_decoded}',
                'X-XSRF-TOKEN': xsrf_token,
                'X-Requested-With': 'XMLHttpRequest',
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Referer': f'https://kick.com/{channel}',
                'cluster': 'v2'
            },
            timeout=30
        )
        
        logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {channel_response.status_code}")
        logger.debug(f"–û—Ç–≤–µ—Ç: {channel_response.text}")
        
        if channel_response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {channel_response.status_code}")
            return False
        
        channel_data = channel_response.json()
        chatroom_id = channel_data.get('chatroom', {}).get('id')
        
        if not chatroom_id:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω chatroom_id")
            return False
        
        logger.info(f"Chatroom ID: {chatroom_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_ref = str(int(time.time() * 1000))
        payload = {
            'content': message,
            'type': 'message',
            'message_ref': message_ref
        }
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        response = scraper.post(
            f"https://kick.com/api/v2/messages/send/{chatroom_id}",
            cookies=cookies,
            headers={
                'Authorization': f'Bearer {session_decoded}',
                'X-XSRF-TOKEN': xsrf_token,
                'X-Requested-With': 'XMLHttpRequest',
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Referer': f'https://kick.com/{channel}',
                'cluster': 'v2'
            },
            json=payload,
            timeout=30
        )
        
        logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}")
        logger.debug(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.text}")
        
        if response.status_code == 200:
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        return False

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏")
    
    results = []
    
    for i, proxy in enumerate(PROXY_LIST):
        logger.info(f"\n{'='*50}")
        logger.info(f"–¢–µ—Å—Ç {i+1}/{len(PROXY_LIST)}")
        
        success = await test_proxy_send(proxy, TEST_TOKEN, TEST_CHANNEL, TEST_MESSAGE)
        results.append((proxy, success))
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        if i < len(PROXY_LIST) - 1:
            await asyncio.sleep(5)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info(f"\n{'='*50}")
    logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    for proxy, success in results:
        status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –ù–ï–£–î–ê–ß–ê"
        logger.info(f"{proxy}: {status}")
    
    success_count = sum(1 for _, success in results if success)
    logger.info(f"\n–ò—Ç–æ–≥–æ: {success_count}/{len(results)} –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")

if __name__ == "__main__":
    asyncio.run(main()) 