import {getFrequency, addOrUpdateFrequencyDB} from "./kick-frequency-db";
import {getAutoMessages, addAutoMessages, clearAllAutoMessages, openAutoMessagesDB} from "./kick-auto-messages-db";
import {addMessageToLogs} from "./kick-input-logs";
import {getKickSocket, workStatus} from "./kick-ws";
import {showAlert} from "./alert";
import {recordAutoMessageSent, resetAutoSpeed} from "./speed-manager";

let intervalSendAutoMessageId;
let intervalTimerSendAutoMessageId;
let isAutoSendingActive = false;
let autoMessageStartTime = null;
let autoMessagesSent = 0;
let autoMessageFrequency = 0;
let autoMessageIndex = 0;
let selectedAccounts = [];
let autoMessages = [];
let batchSize = 500; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
let batchDelay = 1; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
let messageWorker = null; // Web Worker –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π - FIRE AND FORGET
function sendBatchMessages(batch) {
    const ws = getKickSocket();
    if (!ws || ws.readyState !== WebSocket.OPEN) {
        console.warn('[OPTIMIZED_AUTO] WebSocket not available for batch sending');
        return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –±–∞—Ç—á–µ–π
    const messages = batch.map(messageData => ({
        "type": "KICK_SEND_MESSAGE",
        "message": messageData,
    }));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º
    messages.forEach(msg => {
        try {
            ws.send(JSON.stringify(msg));
        } catch (error) {
            console.error('[OPTIMIZED_AUTO] Error sending message:', error);
        }
    });
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏ —Å Web Worker
async function optimizedAutoMessageSending() {
    if (!isAutoSendingActive || !workStatus || !window.workStatus) {
        console.log('[OPTIMIZED_AUTO] Stopping due to work status:', { isAutoSendingActive, workStatus, windowWorkStatus: window.workStatus });
        stopOptimizedAutoMessageSending();
        return;
    }
    
    if (selectedAccounts.length === 0 || autoMessages.length === 0) {
        console.log('[OPTIMIZED_AUTO] No accounts or messages available');
        return;
    }
    
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Web Worker –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞—Ç—á–∞ –≤ —Ñ–æ–Ω–µ
        if (messageWorker) {
            messageWorker.postMessage({
                type: 'PROCESS_BATCH',
                data: {
                    accounts: selectedAccounts,
                    messages: autoMessages,
                    batchSize: batchSize,
                    startIndex: autoMessageIndex
                }
            });
        } else {
            // Fallback –±–µ–∑ Web Worker
            const batch = [];
            const currentTime = Date.now();
            const channel = document.getElementById("selectedChannel")?.innerText || "default";
            
            const baseMessageData = {
                "channel": channel,
                "auto": true
            };
            
            for (let i = 0; i < batchSize; i++) {
                const accountIndex = (autoMessageIndex + i) % selectedAccounts.length;
                const messageIndex = Math.floor((autoMessageIndex + i) / selectedAccounts.length) % autoMessages.length;
                
                const messageData = {
                    ...baseMessageData,
                    "account": selectedAccounts[accountIndex],
                    "message": autoMessages[messageIndex],
                    "messageId": currentTime + i
                };
                
                batch.push(messageData);
            }
            
            sendBatchMessages(batch);
            autoMessagesSent += batchSize;
            autoMessageIndex = (autoMessageIndex + batchSize) % (selectedAccounts.length * autoMessages.length);
        }
        
        console.log(`[OPTIMIZED_AUTO] Sent batch of ${batchSize} messages. Total sent: ${autoMessagesSent}`);
        
    } catch (error) {
        console.error('[OPTIMIZED_AUTO] Error sending batch:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏
function startOptimizedAutoMessageSending() {
    if (isAutoSendingActive) {
        console.log('[OPTIMIZED_AUTO] Auto sending already active');
        return;
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Web Worker –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    if (!messageWorker && typeof Worker !== 'undefined') {
        try {
            messageWorker = new Worker('/static/assets/KickApp/js/chat/message-worker.js');
            // Fallback –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
            if (!messageWorker) {
                console.warn('[OPTIMIZED_AUTO] Web Worker not available, using fallback');
                return;
            }
            messageWorker.onmessage = function(e) {
                const { type, batch, nextIndex } = e.data;
                if (type === 'BATCH_READY') {
                    const channel = document.getElementById("selectedChannel")?.innerText || "default";
                    const baseMessageData = {
                        "channel": channel,
                        "auto": true
                    };
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∏–∑ Worker
                    const fullBatch = batch.map(msg => ({
                        ...baseMessageData,
                        ...msg
                    }));
                    
                    sendBatchMessages(fullBatch);
                    autoMessagesSent += batchSize;
                    autoMessageIndex = nextIndex;
                }
            };
            console.log('[OPTIMIZED_AUTO] Web Worker initialized');
        } catch (error) {
            console.warn('[OPTIMIZED_AUTO] Web Worker not available, using fallback:', error);
        }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    selectedAccounts = Array.from(document.querySelectorAll('[data-account-selected="true"]'))
        .map(el => el.value);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    const textarea = document.getElementById("autoMessageTextArea");
    if (textarea) {
        autoMessages = textarea.value.split("\n")
            .map(line => line.trim())
            .filter(line => line !== "");
    }
    

    
    if (selectedAccounts.length === 0) {
        showAlert("No accounts selected for auto sending", "alert-warning", true, 3000);
        return;
    }
    
    if (autoMessages.length === 0) {
        showAlert("No messages configured for auto sending", "alert-warning", true, 3000);
        return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç–æ—Ç—É
    const freqElement = document.getElementById("frequency-send");
    if (freqElement) {
        autoMessageFrequency = parseInt(freqElement.value) || 1;
    }
    

    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –±–∞—Ç—á–µ–π —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
    const messagesPerMinute = autoMessageFrequency;
    const messagesPerSecond = messagesPerMinute / 60;
    const batchInterval = Math.max(50, (batchSize / messagesPerSecond) * 1000); // –º–∏–Ω–∏–º—É–º 50–º—Å –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
    
    console.log(`[OPTIMIZED_AUTO] Starting with ${selectedAccounts.length} accounts, ${autoMessages.length} messages, ${autoMessageFrequency} msg/min`);
    console.log(`[OPTIMIZED_AUTO] Batch interval: ${batchInterval}ms`);
    
    isAutoSendingActive = true;
    autoMessageStartTime = Date.now();
    autoMessagesSent = 0;
    autoMessageIndex = 0;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞—Ç—á–µ–π
    intervalSendAutoMessageId = setInterval(optimizedAutoMessageSending, batchInterval);
    window.optimizedAutoMessageInterval = intervalSendAutoMessageId; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    const checkbox = document.getElementById('sendAutoMessageStatus');
    if (checkbox) {
        checkbox.checked = true;
    }
    
    const editAutoMessageBtn = document.getElementById("editAutoMessage");
    if (editAutoMessageBtn) {
        editAutoMessageBtn.disabled = true;
    }
    
            showAlert(`üöÄ Auto sending started: ${autoMessageFrequency} msg/min`, "alert-success", true, 3000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏
function stopOptimizedAutoMessageSending() {
    console.log('[OPTIMIZED_AUTO] Stopping auto sending...');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
    if (intervalSendAutoMessageId) {
        clearInterval(intervalSendAutoMessageId);
        intervalSendAutoMessageId = null;
        console.log('[OPTIMIZED_AUTO] Cleared intervalSendAutoMessageId');
    }
    
    if (intervalTimerSendAutoMessageId) {
        clearInterval(intervalTimerSendAutoMessageId);
        intervalTimerSendAutoMessageId = null;
        console.log('[OPTIMIZED_AUTO] Cleared intervalTimerSendAutoMessageId');
    }
    
    // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    if (window.intervalSendAutoMessageId) {
        clearInterval(window.intervalSendAutoMessageId);
        window.intervalSendAutoMessageId = null;
        console.log('[OPTIMIZED_AUTO] Cleared global intervalSendAutoMessageId');
    }
    
    if (window.intervalTimerSendAutoMessageId) {
        clearInterval(window.intervalTimerSendAutoMessageId);
        window.intervalTimerSendAutoMessageId = null;
        console.log('[OPTIMIZED_AUTO] Cleared global intervalTimerSendAutoMessageId');
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    isAutoSendingActive = false;
    autoMessageStartTime = null;
    autoMessagesSent = 0;
    autoMessageIndex = 0;
    
    // –û—á–∏—â–∞–µ–º Web Worker
    if (messageWorker) {
        messageWorker.terminate();
        messageWorker = null;
        console.log('[OPTIMIZED_AUTO] Web Worker terminated');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    const checkbox = document.getElementById('sendAutoMessageStatus');
    if (checkbox) {
        checkbox.checked = false;
    }
    
    const editAutoMessageBtn = document.getElementById("editAutoMessage");
    if (editAutoMessageBtn) {
        editAutoMessageBtn.disabled = false;
    }
    
    resetAutoSpeed();
    
    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –º–æ–∂–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è
    console.log('[OPTIMIZED_AUTO] Auto sending stopped completely');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
function setOptimizationParams(newBatchSize = 500, newBatchDelay = 1) {
    batchSize = newBatchSize;
    batchDelay = newBatchDelay;
    console.log(`[OPTIMIZED_AUTO] Optimization params updated: batchSize=${batchSize}, batchDelay=${batchDelay}ms`);
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
window.startOptimizedAutoMessageSending = startOptimizedAutoMessageSending;
window.stopOptimizedAutoMessageSending = stopOptimizedAutoMessageSending;
window.setOptimizationParams = setOptimizationParams;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
export {
    startOptimizedAutoMessageSending,
    stopOptimizedAutoMessageSending,
    setOptimizationParams,
    isAutoSendingActive,
    autoMessagesSent,
    autoMessageFrequency
}; 