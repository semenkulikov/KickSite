#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫ –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç—Ä–∏–º–µ—Ä–∞–º –≤ –≥–∏–¥—Ä–µ
"""

import asyncio
import logging
import os
import threading
import time
from datetime import datetime
from typing import List, Optional

from asgiref.sync import sync_to_async
from django.contrib.auth import get_user_model
from django.db import transaction
from django.utils import timezone

from KickApp.models import KickAccount, KickAccountAssignment, StreamerStatus, StreamerHydraSettings, StreamerMessage, HydraBotSettings
from ServiceApp.models import User
from StatsApp.models import Shift
from KickApp.process_message_manager import ProcessMessageManager, MessageStatus
import json

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    logs_dir = 'logs'
    os.makedirs(logs_dir, exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    formatter = logging.Formatter(
        '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
    )
    
    # Handler –¥–ª—è auto_messaging.log
    auto_handler = logging.FileHandler(f'{logs_dir}/auto_messaging.log')
    auto_handler.setFormatter(formatter)
    auto_handler.setLevel(logging.INFO)
    
    # Handler –¥–ª—è shifts.log
    shifts_handler = logging.FileHandler(f'{logs_dir}/shifts.log')
    shifts_handler.setFormatter(formatter)
    shifts_handler.setLevel(logging.INFO)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä—ã (—Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤—ã–µ, –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ settings.py)
    auto_logger = logging.getLogger('KickApp.auto_message_sender')
    auto_logger.addHandler(auto_handler)
    auto_logger.setLevel(logging.INFO)
    
    stats_logger = logging.getLogger('StatsApp')
    stats_logger.addHandler(shifts_handler)
    stats_logger.setLevel(logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
setup_logging()

logger = logging.getLogger('KickApp.auto_message_sender')

class AutoMessageSender:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –≤ –≥–∏–¥—Ä–µ"""
    
    def __init__(self):
        self.is_running = False
        self.settings = None
        self.current_cycle = 0  # –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ü–∏–∫–ª–æ–≤
        self._managers_cache = {}  # –ö—ç—à –¥–ª—è ProcessMessageManager
        self._managers_lock = threading.Lock()
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print("üîç AutoMessageSender.start() –≤—ã–∑–≤–∞–Ω")
        logger.info("üîç AutoMessageSender.start() –≤—ã–∑–≤–∞–Ω")
        
        if self.is_running:
            print("‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            logger.warning("‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        
        try:
            print("üîç –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.settings = HydraBotSettings.get_settings()
            print(f"üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã: {self.settings}")
            
            if not self.settings.is_enabled:
                print("‚è∏Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                logger.info("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                return
            
            print(f"üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ì–∏–¥—Ä—ã: enabled={self.settings.is_enabled}, cycle_interval={self.settings.cycle_interval}, message_interval={self.settings.message_interval}")
            logger.info(f"üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ì–∏–¥—Ä—ã: enabled={self.settings.is_enabled}, cycle_interval={self.settings.cycle_interval}, message_interval={self.settings.message_interval}")
            
            print("üîç –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_running = True")
            self.is_running = True
            
            print("üîç –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.thread = threading.Thread(target=self._run_async_loop, daemon=True)
            print("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫...")
            self.thread.start()
            print("‚úÖ –ü–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            import traceback
            traceback.print_exc()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.is_running = False
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö
        with self._managers_lock:
            for manager in self._managers_cache.values():
                try:
                    print(f"üõë –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ...")
                    manager.cancel_all()
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
            self._managers_cache.clear()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º event loop –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
        if hasattr(self, '_loop') and self._loop and not self._loop.is_closed():
            try:
                print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º event loop...")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ –≤ —Ç–æ–º –∂–µ –ø–æ—Ç–æ–∫–µ, —á—Ç–æ –∏ event loop
                if threading.current_thread() != self.thread:
                    self._loop.call_soon_threadsafe(self._loop.stop)
                else:
                    # –ï—Å–ª–∏ –º—ã –≤ —Ç–æ–º –∂–µ –ø–æ—Ç–æ–∫–µ, –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                    self._loop.stop()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ event loop: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ event loop: {e}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
        if hasattr(self, 'thread') and self.thread and self.thread.is_alive():
            print("üõë –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞...")
            try:
                self.thread.join(timeout=15)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–æ 15 —Å–µ–∫—É–Ω–¥
                
                # –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
                if self.thread.is_alive():
                    print("‚ö†Ô∏è –ü–æ—Ç–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
                    # –í Python –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ —É–±–∏—Ç—å –ø–æ—Ç–æ–∫, –Ω–æ –º–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥
                    self.is_running = False
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞: {e}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–±—Ä–æ—Å —Ñ–ª–∞–≥–∞
        self.is_running = False
        
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def _get_manager_for_user(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç ProcessMessageManager –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self._managers_lock:
            if user_id not in self._managers_cache:
                from KickApp.process_message_manager import ProcessMessageManagerFactory
                factory = ProcessMessageManagerFactory()
                self._managers_cache[user_id] = factory.get_manager(user_id, max_processes=50)
                logger.info(f"Created new ProcessMessageManager for user {user_id}")
            return self._managers_cache[user_id]
    
    def _run_async_loop(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            self._loop = asyncio.new_event_loop()
            asyncio.set_event_loop(self._loop)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            self._loop.run_until_complete(self._main_loop())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        finally:
            if self._loop and not self._loop.is_closed():
                self._loop.close()
    
    async def _main_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª - —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤"""
        print("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≥–∏–¥—Ä—ã –∑–∞–ø—É—â–µ–Ω–∞")
        logger.info("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≥–∏–¥—Ä—ã –∑–∞–ø—É—â–µ–Ω–∞")
        
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        previous_enabled_state = None
        
        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –Ω–∞—á–∞–ª–µ —Ü–∏–∫–ª–∞
                if not self.is_running:
                    print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª...")
                    break
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await sync_to_async(self.settings.refresh_from_db)()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                current_enabled_state = self.settings.is_enabled
                if previous_enabled_state is not None and previous_enabled_state != current_enabled_state:
                    if current_enabled_state:
                        logger.info("üîÑ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
                        print("üîÑ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
                    else:
                        logger.info("üõë –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
                        print("üõë –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
                        self.is_running = False
                        break
                
                previous_enabled_state = current_enabled_state
                
                if not self.settings.is_enabled:
                    print("‚è∏Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å...")
                    logger.info("‚è∏Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å...")
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é
                    self.is_running = False
                    break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Ç—Ä–∏–º–µ—Ä–æ–≤
                if not self.is_running:
                    print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π, –∑–∞–≤–µ—Ä—à–∞–µ–º...")
                    break
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.info(f"üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ì–∏–¥—Ä—ã: enabled={self.settings.is_enabled}, cycle_interval={self.settings.cycle_interval}, message_interval={self.settings.message_interval}")
                
                print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –≤ –≥–∏–¥—Ä–µ...")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –≤ –≥–∏–¥—Ä–µ
                streamers = await sync_to_async(list)(StreamerStatus.objects.filter(
                    is_hydra_enabled=True,
                    assigned_user__isnull=False
                ).select_related('assigned_user'))
                
                if not streamers:
                    logger.info("–ù–µ—Ç —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –≤ –≥–∏–¥—Ä—É")
                    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                    await asyncio.sleep(10)
                    continue
                
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(streamers)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –≤ –≥–∏–¥—Ä–µ")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞
                tasks = []
                for streamer in streamers:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∏–º–µ—Ä–∞
                    try:
                        hydra_settings = await sync_to_async(StreamerHydraSettings.objects.get)(streamer=streamer)
                        if not await sync_to_async(lambda: hydra_settings.is_active)():
                            logger.info(f"‚è∏Ô∏è –°—Ç—Ä–∏–º–µ—Ä {streamer.vid} –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                            continue
                        logger.info(f"‚úÖ –°—Ç—Ä–∏–º–µ—Ä {streamer.vid} –∞–∫—Ç–∏–≤–µ–Ω, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: message_interval={await sync_to_async(lambda: hydra_settings.message_interval)()}, cycle_interval={await sync_to_async(lambda: hydra_settings.cycle_interval)()}")
                    except StreamerHydraSettings.DoesNotExist:
                        logger.info(f"‚úÖ –°—Ç—Ä–∏–º–µ—Ä {streamer.vid} –∞–∫—Ç–∏–≤–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)")
                    
                    task = asyncio.create_task(self._run_streamer_cycle(streamer))
                    tasks.append(task)
                
                if tasks:
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Ü–∏–∫–ª–æ–≤
                    await asyncio.gather(*tasks, return_exceptions=True)
                    logger.info("‚úÖ –í—Å–µ —Ü–∏–∫–ª—ã —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
                else:
                    logger.info("‚è∏Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
                cycle_interval = self.settings.cycle_interval or 5
                logger.info(f"‚è±Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏: {cycle_interval} —Å–µ–∫")
                await asyncio.sleep(cycle_interval)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                if not self.is_running:
                    print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º...")
                    break
                    
                await asyncio.sleep(30)  # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        print("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –≥–∏–¥—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        logger.info("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –≥–∏–¥—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    async def _run_streamer_cycle(self, streamer):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞"""
        try:
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞ {streamer.vid}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∏–º–µ—Ä–∞
            try:
                hydra_settings = await sync_to_async(StreamerHydraSettings.objects.get)(streamer=streamer)
                logger.info(f"‚öôÔ∏è –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {streamer.vid}: message_interval={await sync_to_async(lambda: hydra_settings.message_interval)()}, cycle_interval={await sync_to_async(lambda: hydra_settings.cycle_interval)()}")
                
                if not await sync_to_async(lambda: hydra_settings.is_active)():
                    logger.info(f"‚è∏Ô∏è –°—Ç—Ä–∏–º–µ—Ä {streamer.vid} –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                    return
            except StreamerHydraSettings.DoesNotExist:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç—É—Å
                if not await sync_to_async(lambda: streamer.is_hydra_enabled)():
                    logger.info(f"‚è∏Ô∏è –°—Ç—Ä–∏–º–µ—Ä {streamer.vid} –æ—Ç–∫–ª—é—á–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ")
                    return
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                try:
                    hydra_settings = await sync_to_async(StreamerHydraSettings.objects.create)(
                        streamer=streamer,
                        is_active=await sync_to_async(lambda: streamer.is_hydra_enabled)(),
                        message_interval=None,
                        cycle_interval=None
                    )
                    logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞ {streamer.vid}: is_active={await sync_to_async(lambda: streamer.is_hydra_enabled)()}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞ {streamer.vid}: {e}")
                    return
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            if not await sync_to_async(lambda: streamer.is_hydra_enabled)():
                logger.info(f"‚è∏Ô∏è –°—Ç—Ä–∏–º–µ—Ä {streamer.vid} –æ—Ç–∫–ª—é—á–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞
            messages = await sync_to_async(list)(
                StreamerMessage.objects.filter(
                    streamer=streamer,
                    is_active=True
                )
            )
            
            logger.info(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(messages)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞ {streamer.vid}")
            
            if not messages:
                logger.info(f"‚è∏Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞ {streamer.vid}")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_accounts = await sync_to_async(list)(
                KickAccount.objects.filter(
                    assignments__user=streamer.assigned_user,
                    assignments__is_active=True,
                    status='active'
                )
            )
            
            if not user_accounts:
                logger.warning(f"‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {streamer.assigned_user.username}")
                return
            
            logger.info(f"üë§ –ù–∞–π–¥–µ–Ω–æ {len(user_accounts)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {streamer.assigned_user.username}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–º–µ–Ω—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            from StatsApp.models import Shift
            shift = await sync_to_async(Shift.objects.create)(
                user=streamer.assigned_user,
                is_active=True
            )
            logger.info(f"üìä –°–æ–∑–¥–∞–Ω–∞ —Å–º–µ–Ω–∞ {shift.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {streamer.assigned_user.username}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Å–º–µ–Ω—ã
            await self._log_shift_action(shift, 'shift_start', f'–ù–∞—á–∞—Ç–∞ —Å–º–µ–Ω–∞ –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞ {streamer.vid}', {
                'streamer': streamer.vid,
                'total_messages': len(messages),
                'total_accounts': len(user_accounts),
                'message_interval': await sync_to_async(lambda: hydra_settings.get_message_interval())() or self.settings.message_interval or 1
            })
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await self._log_shift_action(shift, 'settings_change', f'–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞ {streamer.vid}', {
                'streamer': streamer.vid,
                'message_interval': await sync_to_async(lambda: hydra_settings.get_message_interval())() or self.settings.message_interval or 1,
                'cycle_interval': await sync_to_async(lambda: hydra_settings.get_message_interval())() or self.settings.cycle_interval or 3,
                'is_active': await sync_to_async(lambda: hydra_settings.is_active)()
            })
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            sent_count = 0
            failed_count = 0
            
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞ {streamer.vid}")
            
            for i, message in enumerate(messages):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                if not self.is_running:
                    logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞ {streamer.vid}")
                    break
                
                logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {i+1}/{len(messages)} –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞ {streamer.vid}")
                
                if not await sync_to_async(lambda: message.is_active)():
                    logger.info(f"‚è∏Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ {i+1} –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                # –í—ã–±–∏—Ä–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –ø–æ –∫—Ä—É–≥—É
                account = user_accounts[i % len(user_accounts)]
                logger.info(f"üë§ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫–∫–∞—É–Ω—Ç {await sync_to_async(lambda: account.login)()} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {i+1}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∞–π—Ç–µ)
                success = await self._send_message_simple(
                    account,
                    streamer.vid,
                    await sync_to_async(lambda: message.message)(),
                    streamer.assigned_user # Pass assigned_user here
                )
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Å–º–µ–Ω—É –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è
                await self._log_auto_message_to_shift(shift, streamer.vid, await sync_to_async(lambda: account.login)(), await sync_to_async(lambda: message.message)())
                
                if success:
                    sent_count += 1
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    await sync_to_async(shift.update_speed)()
                    logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è {sent_count} –¥–ª—è {streamer.vid}")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                    await sync_to_async(shift.add_action)('message_success', f'–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {await sync_to_async(lambda: account.login)()} -> {streamer.vid}', {
                        'account': await sync_to_async(lambda: account.login)(),
                        'channel': streamer.vid,
                        'message': await sync_to_async(lambda: message.message)()[:50] + '...' if len(await sync_to_async(lambda: message.message)()) > 50 else await sync_to_async(lambda: message.message)(),
                        'message_number': sent_count
                    })
                else:
                    failed_count += 1
                    logger.warning(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {i+1} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {streamer.vid}")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                    await sync_to_async(shift.add_action)('message_failed', f'–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {await sync_to_async(lambda: account.login)()} -> {streamer.vid}', {
                        'account': await sync_to_async(lambda: account.login)(),
                        'channel': streamer.vid,
                        'message': await sync_to_async(lambda: message.message)()[:50] + '...' if len(await sync_to_async(lambda: message.message)()) > 50 else await sync_to_async(lambda: message.message)(),
                        'message_number': i + 1
                    })
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ)
                message_interval = await sync_to_async(lambda: hydra_settings.get_message_interval())() or self.settings.message_interval or 1
                logger.info(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è {streamer.vid}: {message_interval} —Å–µ–∫ (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π: {await sync_to_async(lambda: hydra_settings.message_interval)()}, –≥–ª–æ–±–∞–ª—å–Ω—ã–π: {self.settings.message_interval})")
                await asyncio.sleep(message_interval)
            
            logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω —Ü–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {streamer.vid}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count}, –Ω–µ—É–¥–∞—á–Ω–æ {failed_count}")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–º–µ–Ω—É
            if sent_count > 0 or failed_count > 0:
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã
                await self._log_shift_action(shift, 'shift_end', f'–ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–º–µ–Ω–∞ –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞ {streamer.vid}', {
                    'streamer': streamer.vid,
                    'sent_count': sent_count,
                    'failed_count': failed_count,
                    'total_messages': len(messages),
                    'message_interval': message_interval
                })
                
                await sync_to_async(shift.finish)()
                logger.info(f"üì§ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {streamer.vid}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ—É–¥–∞—á–Ω–æ: {failed_count})")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–º–µ–Ω—ã
                try:
                    from StatsApp.shift_manager import get_shift_manager
                    shift_manager = get_shift_manager(streamer.assigned_user)
                    stats = await sync_to_async(shift_manager.get_shift_statistics)(shift)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
                    try:
                        from channels.layers import get_channel_layer
                        channel_layer = get_channel_layer()
                        await channel_layer.group_send(
                            f"chat_{streamer.assigned_user.id}",
                            {
                                'type': 'send_stats_update',
                                'event': 'KICK_STATS_UPDATE',
                                'message': stats
                            }
                        )
                        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ WebSocket –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {streamer.assigned_user.username}")
                    except Exception as ws_error:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ WebSocket, –ø—Ä–æ–±—É–µ–º HTTP: {ws_error}")
                        
                        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å
                        try:
                            import aiohttp
                            async with aiohttp.ClientSession() as session:
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                                stats_url = f"http://localhost:8000/stats/shifts/{shift.id}/update/"
                                async with session.post(stats_url, json=stats) as response:
                                    if response.status == 200:
                                        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ HTTP –¥–ª—è —Å–º–µ–Ω—ã {shift.id}")
                                    else:
                                        logger.warning(f"‚ö†Ô∏è HTTP –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ—Ä–Ω—É–ª–æ —Å—Ç–∞—Ç—É—Å {response.status}")
                        except Exception as http_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {http_error}")
                            
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            else:
                # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏, —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é —Å–º–µ–Ω—É
                await sync_to_async(shift.delete)()
                logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è {streamer.vid} - –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å—Ç—Ä–∏–º–µ—Ä–∞ {streamer.vid}: {e}")
            import traceback
            traceback.print_exc()
    
    async def _send_message_simple(self, account, channel, message, user):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è ProcessMessageManager (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∞–π—Ç–µ)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            account_login = await sync_to_async(lambda: account.login)()
            account_token = await sync_to_async(lambda: account.token)()
            account_session_token = await sync_to_async(lambda: account.session_token)()
            account_proxy = await sync_to_async(lambda: account.proxy)()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if not account_session_token:
                logger.warning(f"‚ùå No session_token for account {account_login}")
                return False

            if not account_proxy:
                logger.warning(f"‚ùå No proxy assigned to account {account_login}")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º URL –ø—Ä–æ–∫—Å–∏
            proxy_url = await sync_to_async(lambda: account_proxy.url)() if account_proxy else ""
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ProcessMessageManager –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            manager = self._get_manager_for_user(user.id)
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            import time
            request_id = f"hydra_{account_login}_{channel}_{int(time.time() * 1000)}"
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {account_login} -> {channel}: {message}")
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {account_login} -> {channel}: {message}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ProcessMessageManager (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∞–π—Ç–µ)
            result = await manager.send_message_async(
                request_id=request_id,
                channel=channel,
                account=account_login,
                message=message,
                token=account_token,
                session_token=account_session_token,
                proxy_url=proxy_url,
                auto=True  # –≠—Ç–æ –∞–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result and result.status.value == 'success':
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {account_login} -> {channel}")
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ {account_login} –≤ {channel}")
                return True
            else:
                error_msg = result.error if result else "Unknown error"
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞ –æ—Ç Kick, –∞ –Ω–µ —Å–µ—Ç—å/—Ç–∞–π–º–∞—É—Ç
                error = str(error_msg).lower()
                if any(keyword in error for keyword in ['banned', 'followers', 'rate limit', 'security', 'kick.com']):
                    # –≠—Ç–æ –æ—Ç–≤–µ—Ç –æ—Ç Kick - —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
                    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–æ—Ç–≤–µ—Ç –æ—Ç Kick): {account_login} -> {channel} - {error_msg}")
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–æ—Ç–≤–µ—Ç –æ—Ç Kick): {account_login} - {error_msg}")
                    return True
                else:
                    # –≠—Ç–æ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏/—Ç–∞–π–º–∞—É—Ç - —Å—á–∏—Ç–∞–µ–º –Ω–µ—É—Å–ø–µ—à–Ω—ã–º
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏/—Ç–∞–π–º–∞—É—Ç: {account_login} -> {channel} - {error_msg}")
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏/—Ç–∞–π–º–∞—É—Ç: {account_login} - {error_msg}")
                    return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def _log_auto_message_to_shift(self, shift, channel, account, message):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–º–µ–Ω—É"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–º–µ–Ω—ã
            await sync_to_async(shift.add_message)('a')  # 'a' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ MessageLog
            from StatsApp.models import MessageLog
            await sync_to_async(MessageLog.objects.create)(
                shift=shift,
                channel=channel,
                account=account,
                message_type='a',  # 'a' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                message=message
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤ ShiftLog –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
            await sync_to_async(shift.add_action)('message_sent', f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {account} -> {channel}', {
                'account': account,
                'channel': channel,
                'message': message[:50] + '...' if len(message) > 50 else message,
                'type': 'auto'
            })
            
            logger.info(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥ —Å–º–µ–Ω—ã {shift.id}: {account} -> {channel}: {message[:50]}...")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–º–µ–Ω—É: {e}")

    async def _log_shift_action(self, shift, action_type, message, data=None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–º–µ–Ω–µ"""
        try:
            await sync_to_async(shift.add_action)(action_type, message, data)
            logger.info(f"ÔøΩÔøΩ –î–µ–π—Å—Ç–≤–∏–µ '{action_type}' –∑–∞–ø–∏—Å–∞–Ω–æ –≤ —Å–º–µ–Ω—É {shift.id}: {message}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–º–µ–Ω—É: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
_auto_message_sender = None
_restart_lock = threading.Lock()
_last_restart_time = 0
_start_stop_lock = threading.Lock()
_is_starting = False
_is_stopping = False

def get_auto_message_sender():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞"""
    global _auto_message_sender
    if _auto_message_sender is None:
        _auto_message_sender = AutoMessageSender()
    return _auto_message_sender

def start_auto_messaging():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global _is_starting
    
    with _start_stop_lock:
        if _is_starting:
            print("‚è∏Ô∏è –ó–∞–ø—É—Å–∫ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        _is_starting = True
    
    try:
        print("üîç start_auto_messaging() –≤—ã–∑–≤–∞–Ω–∞")
        logger.info("üîç start_auto_messaging() –≤—ã–∑–≤–∞–Ω–∞")
        
        sender = get_auto_message_sender()
        print(f"üîç –ü–æ–ª—É—á–µ–Ω sender: {sender}")
        print(f"üîç sender.is_running: {sender.is_running}")
        logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω sender: {sender}")
        logger.info(f"üîç sender.is_running: {sender.is_running}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —Å–µ—Ä–≤–∏—Å
        if sender.is_running:
            print("‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            logger.warning("‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        sender.start()
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞")
        logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ start_auto_messaging: {e}")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ start_auto_messaging: {e}")
        import traceback
        traceback.print_exc()
    finally:
        with _start_stop_lock:
            _is_starting = False

def stop_auto_messaging():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global _is_stopping
    
    with _start_stop_lock:
        if _is_stopping:
            print("‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        _is_stopping = True
    
    try:
        sender = get_auto_message_sender()
        print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        sender.stop()
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ stop_auto_messaging: {e}")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ stop_auto_messaging: {e}")
        import traceback
        traceback.print_exc()
    finally:
        with _start_stop_lock:
            _is_stopping = False

def restart_auto_messaging():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global _last_restart_time
    
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    current_time = time.time()
    with _restart_lock:
        if current_time - _last_restart_time < 10:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏
            print("‚è∏Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–ø—É—â–µ–Ω (—Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ)")
            logger.warning("‚è∏Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–ø—É—â–µ–Ω (—Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ)")
            return
        _last_restart_time = current_time
    
    try:
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        
        sender = get_auto_message_sender()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if sender.is_running:
            print("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ—Ä–≤–∏—Å...")
            logger.info("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ—Ä–≤–∏—Å...")
            sender.stop()
            
            # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            time.sleep(8)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if sender.is_running:
                print("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Å–µ –µ—â–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
                sender.stop()
            time.sleep(3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if sender.settings:
            sender.settings.refresh_from_db()
        
        if sender.settings and sender.settings.is_enabled:
            print("üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
            logger.info("üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
            sender.start()
        else:
            print("‚è∏Ô∏è –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            logger.info("‚è∏Ô∏è –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
        import traceback
        traceback.print_exc()

def get_auto_messaging_status():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    sender = get_auto_message_sender()
    return {
        'running': sender.is_running,
        'cycle': sender.current_cycle,
        'settings': {
            'is_enabled': sender.settings.is_enabled,
            'message_interval': sender.settings.message_interval,
            'cycle_interval': sender.settings.cycle_interval,
            'max_concurrent_sends': sender.settings.max_concurrent_sends,
            'min_message_interval': sender.settings.min_message_interval
        }
    } 