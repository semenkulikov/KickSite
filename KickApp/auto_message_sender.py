#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫ –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç—Ä–∏–º–µ—Ä–∞–º
"""

import asyncio
import threading
import logging
import os
import time
from datetime import datetime, timedelta
from django.utils import timezone
from asgiref.sync import sync_to_async
from django.contrib.auth import get_user_model
from KickApp.models import StreamerStatus, StreamerMessage, KickAccount, HydraBotSettings
from KickApp.supabase_sync import SupabaseSyncService, run_sync_async
from KickApp.process_message_manager import ProcessMessageManagerFactory, MessageStatus
from StatsApp.models import Shift, MessageLog, ShiftLog

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    logs_dir = 'logs'
    os.makedirs(logs_dir, exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    formatter = logging.Formatter(
        '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
    )
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π handler
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    console_handler.setLevel(logging.INFO)
    
    # Handler –¥–ª—è auto_messaging.log
    auto_handler = logging.FileHandler(f'{logs_dir}/auto_messaging.log')
    auto_handler.setFormatter(formatter)
    auto_handler.setLevel(logging.INFO)
    
    # Handler –¥–ª—è shifts.log
    shifts_handler = logging.FileHandler(f'{logs_dir}/shifts.log')
    shifts_handler.setFormatter(formatter)
    shifts_handler.setLevel(logging.INFO)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä—ã
    auto_logger = logging.getLogger('KickApp.auto_message_sender')
    auto_logger.addHandler(console_handler)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π handler
    auto_logger.addHandler(auto_handler)
    auto_logger.setLevel(logging.INFO)
    
    supabase_logger = logging.getLogger('KickApp.supabase_sync')
    supabase_logger.addHandler(console_handler)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π handler
    supabase_logger.addHandler(auto_handler)
    supabase_logger.setLevel(logging.INFO)
    
    process_logger = logging.getLogger('KickApp.process_message_manager')
    process_logger.addHandler(console_handler)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π handler
    process_logger.addHandler(auto_handler)
    process_logger.setLevel(logging.INFO)
    
    stats_logger = logging.getLogger('StatsApp')
    stats_logger.addHandler(console_handler)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π handler
    stats_logger.addHandler(shifts_handler)
    stats_logger.setLevel(logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
setup_logging()

logger = logging.getLogger('KickApp.auto_message_sender')

User = get_user_model()

class AutoMessageSender:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    –†–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        self.is_running = False
        self.settings = HydraBotSettings.get_settings()
        self.current_cycle = 0
        self.managers = {}  # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self._last_sync_time = None
        self.manager_factory = ProcessMessageManagerFactory()  # –§–∞–±—Ä–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.is_running:
            print("‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            logger.warning("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        
        self.is_running = True
        self.thread = threading.Thread(target=self._run_async_loop, daemon=True)
        self.thread.start()
        print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
        logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.is_running:
            return
        
        print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π...")
        logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        self.is_running = False
        if self._loop and self._loop.is_running():
            self._loop.call_soon_threadsafe(self._loop.stop)
        
        if self.thread and self.thread.is_alive():
            self.thread.join(timeout=5)
        
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def _run_async_loop(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            self._loop = asyncio.new_event_loop()
            asyncio.set_event_loop(self._loop)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            self._loop.run_until_complete(self._main_loop())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        finally:
            if self._loop and not self._loop.is_closed():
                self._loop.close()
    
    async def _main_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª"""
        print("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞")
        logger.info("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞")
        
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        previous_enabled_state = None
        
        while self.is_running:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await sync_to_async(self.settings.refresh_from_db)()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                current_enabled_state = self.settings.is_enabled
                if previous_enabled_state is not None and previous_enabled_state != current_enabled_state:
                    if current_enabled_state:
                        logger.info("üîÑ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
                        print("üîÑ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
                    else:
                        logger.info("üõë –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
                        print("üõë –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
                
                previous_enabled_state = current_enabled_state
                
                if not self.settings.is_enabled:
                    print("‚è∏Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å...")
                    logger.info("‚è∏Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å...")
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é
                    self.is_running = False
                    break
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.info(f"üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ì–∏–¥—Ä—ã: enabled={self.settings.is_enabled}, cycle_interval={self.settings.cycle_interval}, message_interval={self.settings.message_interval}")
                
                print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏...")
                self.current_cycle += 1
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                await self._sync_data()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                await self._send_messages_to_active_streamers()
                
                # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 —Å–µ–∫—É–Ω–¥—ã)
                cycle_interval = getattr(self.settings, 'cycle_interval', 3)  # 3 —Å–µ–∫—É–Ω–¥—ã
                print(f"‚úÖ –¶–∏–∫–ª {self.current_cycle} –∑–∞–≤–µ—Ä—à–µ–Ω, —Å–ª–µ–¥—É—é—â–∏–π —á–µ—Ä–µ–∑ {cycle_interval} —Å–µ–∫")
                
                # –ñ–¥–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                await asyncio.sleep(cycle_interval)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(30)  # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        print("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        logger.info("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    async def _sync_data(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å Supabase"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –±–æ—Ç
            await sync_to_async(self.settings.refresh_from_db)()
            if not self.settings.is_enabled:
                logger.info("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            current_time = timezone.now()
            if hasattr(self, '_last_sync_time') and self._last_sync_time:
                time_since_last_sync = (current_time - self._last_sync_time).total_seconds()
                if time_since_last_sync < self.settings.sync_interval:
                    return
            
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...")
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                await asyncio.wait_for(
                    run_sync_async(),
                    timeout=60.0  # 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                )
                self._last_sync_time = current_time
                logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–ª–µ–¥—É—é—â–∞—è —á–µ—Ä–µ–∑ {} —Å–µ–∫".format(self.settings.sync_interval))
                
            except asyncio.TimeoutError:
                logger.error("–¢–∞–π–º–∞—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
    
    async def _send_messages_for_streamer(self, streamer, messages, user_accounts):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –±–æ—Ç
            await sync_to_async(self.settings.refresh_from_db)()
            if not self.settings.is_enabled:
                logger.info(f"üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è {streamer.vid}")
                return
            
            if not messages or not user_accounts:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            assigned_user = await sync_to_async(lambda: streamer.assigned_user)()
            if not assigned_user:
                logger.warning(f"–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞ {streamer.vid}")
                return
            
            # –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É —Å–º–µ–Ω—É –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ç—Ä–∏–º–µ—Ä–∞
            shift = await sync_to_async(Shift.objects.create)(
                user=assigned_user,
                start_time=timezone.now(),
                is_active=True
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Å–º–µ–Ω—ã
            try:
                await sync_to_async(ShiftLog.objects.create)(
                    shift=shift,
                    action_type='shift_start',
                    description=f'–ù–∞—á–∞–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω—ã –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞ {streamer.vid}',
                    details={
                        'streamer': streamer.vid,
                        'messages_count': len(messages),
                        'accounts_count': len(user_accounts),
                        'cycle': self.current_cycle
                    }
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã: {e}")
            
            sent_count = 0
            failed_count = 0
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
            for i, message in enumerate(messages):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –±–æ—Ç –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await sync_to_async(self.settings.refresh_from_db)()
                if not self.settings.is_enabled:
                    logger.info(f"üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è {streamer.vid}")
                    return
                
                if not message.is_active:
                    continue
                
                # –í—ã–±–∏—Ä–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –ø–æ –∫—Ä—É–≥—É (–∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–¥–µ–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç)
                account = user_accounts[i % len(user_accounts)]
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                success = await self._send_message_via_manager(
                    await self._get_streamer_manager(assigned_user),
                    account,
                    streamer.vid,
                    message.message,
                    assigned_user
                )
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Å–º–µ–Ω—É –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç Kick
                await self._log_auto_message_to_shift(shift, streamer.vid, account.login, message.message)
                
                if success:
                    sent_count += 1
                    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                    try:
                        await sync_to_async(ShiftLog.objects.create)(
                            shift=shift,
                            action_type='message_sent',
                            description=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {streamer.vid}',
                            details={
                                'channel': streamer.vid,
                                'account': account.login,
                                'message': message.message[:100],
                                'status': 'success'
                            }
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                else:
                    failed_count += 1
                    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                    try:
                        await sync_to_async(ShiftLog.objects.create)(
                            shift=shift,
                            action_type='message_error',
                            description=f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {streamer.vid}',
                            details={
                                'channel': streamer.vid,
                                'account': account.login,
                                'message': message.message[:100],
                                'status': 'failed'
                            }
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å
                await asyncio.sleep(0.5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –¥–æ 0.5 —Å–µ–∫—É–Ω–¥
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–º–µ–Ω—É
            if sent_count > 0 or failed_count > 0:
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã
                try:
                    await sync_to_async(ShiftLog.objects.create)(
                        shift=shift,
                        action_type='shift_end',
                        description=f'–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω—ã –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞ {streamer.vid}',
                        details={
                            'streamer': streamer.vid,
                            'sent_count': sent_count,
                            'failed_count': failed_count,
                            'cycle': self.current_cycle
                        }
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã: {e}")
                
                await sync_to_async(shift.finish)()
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {streamer.vid} (–Ω–µ—É–¥–∞—á–Ω–æ: {failed_count})")
            else:
                # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏, —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é —Å–º–µ–Ω—É
                await sync_to_async(shift.delete)()
                logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è {streamer.vid} - –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {streamer.vid}: {e}")
    
    async def _send_messages_to_active_streamers(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç—Ä–∏–º–µ—Ä–∞–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –±–æ—Ç
            await sync_to_async(self.settings.refresh_from_db)()
            if not self.settings.is_enabled:
                logger.info("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            streamers_with_users = await sync_to_async(list)(StreamerStatus.objects.filter(
                status='active',
                assigned_user__isnull=False
            ).select_related('assigned_user'))
            
            if not streamers_with_users:
                logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞
            tasks = []
            for streamer in streamers_with_users:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞
                messages = await sync_to_async(list)(StreamerMessage.objects.filter(
                    streamer=streamer,
                    is_active=True
                ))
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                assigned_user = await sync_to_async(lambda: streamer.assigned_user)()
                user_accounts = await sync_to_async(list)(KickAccount.objects.filter(
                    assigned_users=assigned_user,
                    status='active'
                ))
                
                if not user_accounts:
                    logger.warning(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {assigned_user.username} –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞ {streamer.vid}")
                    continue
                
                task = self._send_messages_for_streamer(streamer, messages, user_accounts)
                tasks.append(task)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            if tasks:
                await asyncio.gather(*tasks, return_exceptions=True)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫ –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç—Ä–∏–º–µ—Ä–∞–º: {e}")
    
    async def _get_streamer_manager(self, user):
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = await sync_to_async(lambda: user.id)()
            if user_id not in self.managers:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                self.managers[user_id] = self.manager_factory.get_manager(user_id, max_processes=50)
                logger.info(f"Created new ProcessMessageManager for user {user_id}")
            return self.managers[user_id]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    async def _send_message_via_manager(self, manager, account, channel, message, user):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä"""
        try:
            if not manager:
                logger.error("–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
                return False
                
            account_login = await sync_to_async(lambda: account.login)()
            account_token = await sync_to_async(lambda: account.token)()
            account_session_token = await sync_to_async(lambda: account.session_token)()
            proxy_url = await sync_to_async(lambda: account.proxy_url)() if hasattr(account, 'proxy_url') else None
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: account={account_login}, token_length={len(account_token) if account_token else 0}, token_preview={account_token[:20] if account_token else 'None'}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π request_id
            request_id = f"auto_{int(time.time() * 1000)}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                request = await asyncio.wait_for(
                    manager.send_message_async(
                        request_id=request_id,
                        channel=channel,
                        account=account_login,
                        message=message,
                        token=account_token,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞
                        session_token=account_session_token,
                        proxy_url=proxy_url
                    ),
                    timeout=30.0  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                )
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
                for _ in range(300):  # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
                    if request.status in [MessageStatus.SUCCESS, MessageStatus.FAILED, MessageStatus.CANCELLED]:
                        break
                    await asyncio.sleep(0.1)
                
                # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç Kick (–Ω–µ —Ç–æ–ª—å–∫–æ SUCCESS)
                # –ì–ª–∞–≤–Ω–æ–µ - —á—Ç–æ –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç, –∞ –Ω–µ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏/—Ç–∞–π–º–∞—É—Ç
                if request.status == MessageStatus.SUCCESS:
                    return True
                elif request.status == MessageStatus.FAILED and request.error:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞ –æ—Ç Kick, –∞ –Ω–µ —Å–µ—Ç—å/—Ç–∞–π–º–∞—É—Ç
                    error = request.error.lower()
                    if any(keyword in error for keyword in ['banned', 'followers', 'rate limit', 'security', 'kick.com']):
                        # –≠—Ç–æ –æ—Ç–≤–µ—Ç –æ—Ç Kick - —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
                        return True
                    else:
                        # –≠—Ç–æ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏/—Ç–∞–π–º–∞—É—Ç - —Å—á–∏—Ç–∞–µ–º –Ω–µ—É—Å–ø–µ—à–Ω—ã–º
                        return False
                else:
                    return False
                
            except asyncio.TimeoutError:
                logger.error(f"–¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {account_login} –≤ {channel}")
                return False
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä: {e}")
                return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False
    
    async def _log_auto_message_to_shift(self, shift, channel, account, message):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–º–µ–Ω—É"""
        try:
            if not shift:
                return
                
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ MessageLog —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                await sync_to_async(MessageLog.objects.create)(
                    shift=shift,
                    channel=channel,
                    account=account,
                    message_type='a',  # auto
                    message=message
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–º–µ–Ω—ã
                await sync_to_async(shift.add_message)('a')
                
            except Exception as e:
                if "database is locked" in str(e):
                    logger.warning("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ MessageLog")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MessageLog: {e}")
                return
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ ShiftLog —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                await sync_to_async(ShiftLog.objects.create)(
                    shift=shift,
                    action_type='message_sent',
                    description=f'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {channel} (—Ü–∏–∫–ª {self.current_cycle})',
                    details={
                        'channel': channel,
                        'account': account,
                        'message': message[:100],  # –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
                        'type': 'auto',
                        'cycle': self.current_cycle
                    }
                )
            except Exception as e:
                if "database is locked" in str(e):
                    logger.warning("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ ShiftLog")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ShiftLog: {e}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _log_auto_message(self, user, channel, account, message):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º—É —Å–º–µ–Ω (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥)"""
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ —Å–º–µ–Ω–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∑–∞—Ä–∞–Ω–µ–µ
        pass
    
    async def _should_send_message(self, streamer):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            last_sent_time = await sync_to_async(lambda: getattr(streamer, 'last_sent_time', None))()
            
            if not last_sent_time:
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            current_time = timezone.now()
            time_since_last = (current_time - last_sent_time).total_seconds()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 —Å–µ–∫—É–Ω–¥—ã
            min_interval = getattr(self.settings, 'message_interval', 3.0)
            
            return time_since_last >= min_interval
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False
    
    async def _update_last_sent_time(self, streamer):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞"""
        try:
            await sync_to_async(setattr)(streamer, 'last_sent_time', timezone.now())
            await sync_to_async(streamer.save)()
        except Exception as e:
            if "database is locked" in str(e):
                logger.warning("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    
    def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
            for manager in self.managers.values():
                if hasattr(manager, 'cleanup'):
                    manager.cleanup()
            
            # –û—á–∏—â–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
            self.managers.clear()
            
            # –û—á–∏—â–∞–µ–º Supabase —Å–µ—Å—Å–∏—é
            if self.supabase_sync:
                self.supabase_sync.cleanup()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
_auto_message_sender = None

def get_auto_message_sender():
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
    global _auto_message_sender
    if _auto_message_sender is None:
        _auto_message_sender = AutoMessageSender()
    return _auto_message_sender

def start_auto_messaging():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
    sender = get_auto_message_sender()
    sender.start()

def stop_auto_messaging():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
    sender = get_auto_message_sender()
    sender.stop()

def restart_auto_messaging():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        sender = get_auto_message_sender()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if sender.is_running:
            print("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ—Ä–≤–∏—Å...")
            logger.info("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ—Ä–≤–∏—Å...")
            sender.stop()
            
            # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            import time
            time.sleep(3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        sender.settings.refresh_from_db()
        
        if sender.settings.is_enabled:
            print("üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
            logger.info("üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
            sender.start()
        else:
            print("‚è∏Ô∏è –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            logger.info("‚è∏Ô∏è –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")

def get_auto_messaging_status():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    sender = get_auto_message_sender()
    return {
        'running': sender.is_running,
        'cycle': sender.current_cycle,
        'settings': {
            'is_enabled': sender.settings.is_enabled,
            'message_interval': sender.settings.message_interval,
            'sync_interval': sender.settings.sync_interval,
            'max_concurrent_sends': sender.settings.max_concurrent_sends,
            'min_message_interval': sender.settings.min_message_interval
        }
    } 