from django.apps import AppConfig
import threading
import time
import os
import traceback

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
_services_started = False
_services_lock = threading.Lock()

class KickappConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'KickApp'
    
    def ready(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        global _services_started
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã —á—Ç–æ–±—ã –æ–Ω–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å
        try:
            from . import signals
            print("‚úÖ –°–∏–≥–Ω–∞–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Django
        import sys
        
        # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        current_process = os.getpid()
        current_thread = threading.current_thread().ident
        stack_trace = ''.join(traceback.format_stack())
        
        print(f"üîç KickApp ready() –≤—ã–∑–≤–∞–Ω:")
        print(f"   - –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {sys.argv}")
        print(f"   - PID –ø—Ä–æ—Ü–µ—Å—Å–∞: {current_process}")
        print(f"   - ID –ø–æ—Ç–æ–∫–∞: {current_thread}")
        print(f"   - –ò–º—è –ø–æ—Ç–æ–∫–∞: {threading.current_thread().name}")
        print(f"   - –°–µ—Ä–≤–∏—Å—ã —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã: {_services_started}")
        print(f"   - –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:")
        for i, line in enumerate(traceback.format_stack()[-5:], 1):
            print(f"     {i}. {line.strip()}")
        
        # –ü–†–û–í–ï–†–ö–ê: –≠—Ç–æ –Ω–µ –ø—Ä–æ—Ü–µ—Å—Å ProcessMessageManager
        if 'process_message_manager.py' in stack_trace or 'send_message_process' in stack_trace:
            print(f"‚ö†Ô∏è –≠—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å ProcessMessageManager (PID: {current_process}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ (–≤–∫–ª—é—á–∞—è daphne)
        server_commands = ['runserver', 'daphne', 'uvicorn', 'gunicorn']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª—é–±–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–µ—Ä–≤–µ—Ä–∞
        is_server = any(any(cmd in arg for cmd in server_commands) for arg in sys.argv)
        
        if is_server:
            print("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –º–∏–≥—Ä–∞—Ü–∏–∏
            if any(cmd in ' '.join(sys.argv) for cmd in ['makemigrations', 'migrate', 'collectstatic']):
                print("‚ùå –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –º–∏–≥—Ä–∞—Ü–∏–∏, —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è")
                return
            
            print("‚úÖ –ù–µ –º–∏–≥—Ä–∞—Ü–∏–∏, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã")
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            with _services_lock:
                if _services_started:
                    print("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å—ã —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    return
                
                _services_started = True
                print(f"üîí –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤")
                print(f"   - –ü—Ä–æ—Ü–µ—Å—Å: {current_process}")
                print(f"   - –ü–æ—Ç–æ–∫: {current_thread}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            def start_services():
                try:
                    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
                    # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ Django
                    print("‚è≥ –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ Django...")
                    time.sleep(15)
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                    print("üîÑ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
                    from .sync_service import start_sync_service
                    start_sync_service()
                    print("‚úÖ –°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å —Ä–∞—Å—Å—ã–ª–∫–∏
                    print("ü§ñ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏...")
                    from .auto_message_sender import start_auto_messaging
                    start_auto_messaging()
                    print("‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–ø—É—â–µ–Ω")
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    global _services_started
                    _services_started = False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            service_thread = threading.Thread(target=start_services, daemon=True)
            service_thread.start()
            print("‚è≥ –°–µ—Ä–≤–∏—Å—ã –±—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
            
        else:
            print("‚ùå –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞, —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è")
