#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Supabase
"""

import os
import aiohttp
import asyncio
import json
from datetime import datetime, timedelta
from django.utils import timezone
from ServiceApp.models import User  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from asgiref.sync import sync_to_async
from .models import StreamerStatus, AutoResponse, StreamerMessage
from dotenv import load_dotenv
import logging
from .models import KickAccount, KickAccountAssignment

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class SupabaseSyncService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Supabase
    """
    
    def __init__(self):
        self.supabase_url = os.getenv("SUPABASE_URL", "").strip('"')
        self.supabase_key = os.getenv("SUPABASE_KEY", "").strip('"')
        
        if not self.supabase_url or not self.supabase_key:
            raise ValueError("SUPABASE_URL –∏ SUPABASE_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
        
        self.headers = {
            "apikey": self.supabase_key,
            "Authorization": f"Bearer {self.supabase_key}",
            "Content-Type": "application/json"
        }
        self.session = None
    
    async def _get_session(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç aiohttp —Å–µ—Å—Å–∏—é"""
        if not self.session or self.session.closed:
            timeout = aiohttp.ClientTimeout(total=30, connect=10)
            self.session = aiohttp.ClientSession(timeout=timeout)
        return self.session
    
    async def get_all_streamers_async(self):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –í–°–ï–• —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ Supabase (–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö)
        """
        try:
            session = await self._get_session()
            url = f"{self.supabase_url}/rest/v1/stream_status"
            
            all_streamers = []
            offset = 0
            limit = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç Supabase
            
            while True:
                params = {
                    "select": "order_id,vid,updated_at,status",
                    "order": "updated_at.desc",
                    "limit": str(limit),
                    "offset": str(offset)
                }
                
                logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –∫ Supabase (offset={offset}): {url}")
                logger.info(f"üîç Headers: {self.headers}")
                logger.info(f"üîç Params: {params}")
                
                async with session.get(url, params=params, headers=self.headers) as response:
                    logger.info(f"üîç –û—Ç–≤–µ—Ç –æ—Ç Supabase: {response.status}")
                    
                    if response.status == 200:
                        data = await response.json()
                        all_streamers.extend(data)
                        
                        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –∑–∞–ø–∏—Å–µ–π —á–µ–º –ª–∏–º–∏—Ç, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                        if len(data) < limit:
                            break
                        
                        offset += limit
                    elif response.status == 401:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ 401: –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á –∏–ª–∏ URL –¥–ª—è Supabase")
                        logger.error(f"‚ùå URL: {self.supabase_url}")
                        logger.error(f"‚ùå API Key: {self.supabase_key[:10]}...")
                        break
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase: {response.status}")
                        logger.error(f"‚ùå –û—Ç–≤–µ—Ç: {error_text}")
                        break
                
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(all_streamers)} —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ Supabase")
            return all_streamers
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
            import traceback
            traceback.print_exc()
            return []

    async def get_active_streamers_async(self):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ Supabase
        """
        try:
            session = await self._get_session()
            url = f"{self.supabase_url}/rest/v1/stream_status"
            
            active_streamers = []
            offset = 0
            limit = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç Supabase
            
            while True:
                params = {
                    "status": "eq.active",
                    "select": "order_id,vid,updated_at",
                    "order": "updated_at.desc",
                    "limit": str(limit),
                    "offset": str(offset)
                }
                
                logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –∫ Supabase (offset={offset}): {url}")
                logger.info(f"üîç Headers: {self.headers}")
                logger.info(f"üîç Params: {params}")
                
                async with session.get(url, params=params, headers=self.headers) as response:
                    logger.info(f"üîç –û—Ç–≤–µ—Ç –æ—Ç Supabase: {response.status}")
                    
                    if response.status == 200:
                        data = await response.json()
                        active_streamers.extend(data)
                        
                        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –∑–∞–ø–∏—Å–µ–π —á–µ–º –ª–∏–º–∏—Ç, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                        if len(data) < limit:
                            break
                        
                        offset += limit
                    elif response.status == 401:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ 401: –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á –∏–ª–∏ URL –¥–ª—è Supabase")
                        logger.error(f"‚ùå URL: {self.supabase_url}")
                        logger.error(f"‚ùå API Key: {self.supabase_key[:10]}...")
                        break
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase: {response.status}")
                        logger.error(f"‚ùå –û—Ç–≤–µ—Ç: {error_text}")
                        break
                
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(active_streamers)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ Supabase")
            return active_streamers
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
            import traceback
            traceback.print_exc()
            return []
    
    async def sync_streamer_statuses_async(self):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å—ã —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ —Å Supabase
        """
        try:
            all_streamers = await self.get_all_streamers_async()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤
            existing_streamers = {s.vid: s for s in await sync_to_async(list)(StreamerStatus.objects.all())}
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤
            updated_count = 0
            inactive_count = 0
            
            for streamer_data in all_streamers:
                vid = streamer_data['vid']
                order_id = streamer_data['order_id']
                updated_at = streamer_data['updated_at']
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å: –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω –≤ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø—É—Å—Ç–æ–π, None, 'unknown' –∏–ª–∏ 'offline', —Å—á–∏—Ç–∞–µ–º —Å—Ç—Ä–∏–º–µ—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
                status = streamer_data.get('status', 'unknown')
                
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø—É—Å—Ç–æ–π, None, 'unknown' –∏–ª–∏ 'offline', —Å—á–∏—Ç–∞–µ–º —Å—Ç—Ä–∏–º–µ—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
                if not status or status == '' or status == 'unknown' or status == 'offline':
                    status = 'inactive'
                
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                streamer, created = await sync_to_async(StreamerStatus.objects.get_or_create)(
                    vid=vid,
                    defaults={
                        'status': status,
                        'order_id': order_id,
                        'last_updated': timezone.now()
                    }
                )
                
                if not created:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    streamer.status = status
                    streamer.order_id = order_id
                    streamer.last_updated = timezone.now()
                    await sync_to_async(streamer.save)()
                
                # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å—Ç—Ä–∏–º–µ—Ä—É (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω)
                if not streamer.assigned_user:
                    await self._assign_user_to_streamer_async(streamer)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∏–º–µ—Ä–∞
                await self._update_streamer_hydra_settings_async(streamer)
                
                if status == 'active':
                    updated_count += 1
                else:
                    inactive_count += 1
            
            logger.info(f"üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∏–º–µ—Ä–æ–≤: {updated_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö, {inactive_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤: {e}")
    
    async def _assign_user_to_streamer_async(self, streamer):
        """
        –ù–∞–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å—Ç—Ä–∏–º–µ—Ä—É (—Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ)
        """
        try:
            from django.contrib.auth import get_user_model
            User = get_user_model()
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º —Å—Ç—Ä–∏–º–µ—Ä–∞
            user, created = await sync_to_async(User.objects.get_or_create)(
                username=streamer.vid,
                defaults={
                    'email': f"{streamer.vid}@auto.local",
                    'first_name': streamer.vid,
                    'last_name': 'Streamer'
                }
            )
            
            if created:
                logger.info(f"üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {streamer.vid} –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞ {streamer.vid}")
            else:
                logger.info(f"üë§ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {streamer.vid} –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞ {streamer.vid}")
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å—Ç—Ä–∏–º–µ—Ä—É
            streamer.assigned_user = user
            await sync_to_async(streamer.save)()
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ Kick –∞–∫–∫–∞—É–Ω—Ç—ã –∫ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            available_accounts = await sync_to_async(list)(KickAccount.objects.filter(
                status='active',
                assignments__isnull=True  # –ê–∫–∫–∞—É–Ω—Ç—ã –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
            ))
            
            accounts_assigned = 0
            for account in available_accounts:
                assignment, created = await sync_to_async(KickAccountAssignment.objects.get_or_create)(
                    kick_account=account,
                    user=user,
                    defaults={
                        'assignment_type': 'auto',
                        'assigned_by': user
                    }
                )
                if created:
                    accounts_assigned += 1
            
            logger.info(f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –∫ —Å—Ç—Ä–∏–º–µ—Ä—É {streamer.vid} (–¥–æ–±–∞–≤–ª–µ–Ω–æ {accounts_assigned} –∞–∫–∫–∞—É–Ω—Ç–æ–≤)")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å—Ç—Ä–∏–º–µ—Ä—É {streamer.vid}: {e}")
    
    async def _update_streamer_hydra_settings_async(self, streamer, is_active=None):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ì–∏–¥—Ä—ã –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞
        """
        try:
            from .models import StreamerHydraSettings
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if is_active is None:
                is_active = streamer.status == 'active' and streamer.is_hydra_enabled
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            hydra_settings, created = await sync_to_async(StreamerHydraSettings.objects.get_or_create)(
                streamer=streamer,
                defaults={
                    'is_active': is_active,
                    'message_interval': None,
                    'cycle_interval': None,
                }
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if not created or hydra_settings.is_active != is_active:
                hydra_settings.is_active = is_active
                await sync_to_async(hydra_settings.save)(update_fields=['is_active'])
                logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ì–∏–¥—Ä—ã –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞ {streamer.vid}: is_active={is_active}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ì–∏–¥—Ä—ã –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞ {streamer.vid}: {e}")
    
    async def assign_users_to_streamers_async(self):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç—Ä–∏–º–µ—Ä–∞–º –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            active_streamers = await sync_to_async(list)(StreamerStatus.objects.filter(
                status='active',
                assigned_user__isnull=True
            ))
            
            processed_count = 0
            
            for streamer in active_streamers:
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º —Å—Ç—Ä–∏–º–µ—Ä–∞
                user, created = await sync_to_async(User.objects.get_or_create)(
                    username=streamer.vid,
                    defaults={
                        'email': f"{streamer.vid}@auto.local",
                        'is_staff': False,
                        'is_superuser': False
                    }
                )
                
                # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å—Ç—Ä–∏–º–µ—Ä—É
                streamer.assigned_user = user
                await sync_to_async(streamer.save)()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (many-to-many)
                await self._add_accounts_to_user_async(user)
                
                processed_count += 1
            
            if processed_count > 0:
                logger.info(f"üë• –ù–∞–∑–Ω–∞—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {processed_count}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ —Å—Ç—Ä–∏–º–µ—Ä–∞–º: {e}")
    
    async def _add_accounts_to_user_async(self, user):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ many-to-many
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            active_accounts = await sync_to_async(list)(KickAccount.objects.filter(status='active'))
            
            if not active_accounts:
                logger.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
                return
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–∏–ª–∏ –º–µ–Ω—å—à–µ, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ)
            accounts_to_add = active_accounts[:10]
            
            added_count = 0
            for account in accounts_to_add:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                existing_assignment = await sync_to_async(KickAccountAssignment.objects.filter(
                    kick_account=account,
                    user=user
                ).exists)()
                
                if not existing_assignment:
                    # –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await sync_to_async(KickAccountAssignment.objects.create)(
                        kick_account=account,
                        user=user,
                        assigned_by=user,
                        assignment_type='admin_assigned',
                        is_active=True
                    )
                    added_count += 1
            
            if added_count > 0:
                logger.info(f"üîë –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}: {e}")
    
    async def get_messages_for_streamer_async(self, vid):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞ –∏–∑ Supabase
        """
        try:
            session = await self._get_session()
            url = f"{self.supabase_url}/rest/v1/streamer_messages"
            
            all_messages = []
            offset = 0
            limit = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç Supabase
            
            while True:
                params = {
                    "vid": f"eq.{vid}",
                    "select": "vid,message",
                    "order": "created_at.desc",  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
                    "limit": str(limit),
                    "offset": str(offset)
                }
                
                logger.info(f"üîç –ó–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞ {vid} (offset={offset}): {url}")
                
                async with session.get(url, params=params, headers=self.headers) as response:
                    if response.status == 200:
                        data = await response.json()
                        all_messages.extend(data)
                        
                        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –∑–∞–ø–∏—Å–µ–π —á–µ–º –ª–∏–º–∏—Ç, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                        if len(data) < limit:
                            break
                        
                        offset += limit
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {vid}: HTTP {response.status} - {error_text}")
                        break
                
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞ {vid}")
            return all_messages
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {vid}: {str(e)}")
            import traceback
            logger.error(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            return []
    
    async def sync_streamer_messages_async(self):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ —Å Supabase
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º)
            active_streamers = await sync_to_async(list)(StreamerStatus.objects.filter(status='active'))
            
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {len(active_streamers)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤")
            
            total_messages = 0
            inactive_count = 0
            
            for streamer in active_streamers:
                if not streamer:
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º vid —Å—Ç—Ä–∏–º–µ—Ä–∞
                streamer_vid = await sync_to_async(lambda: streamer.vid)()
                logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∏–º–µ—Ä–∞: {streamer_vid}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞
                messages_data = await self.get_messages_for_streamer_async(streamer_vid)
                
                if messages_data:
                    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞
                    await sync_to_async(streamer.messages.all().delete)()
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞ {streamer_vid}")
                    
                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    for message_data in messages_data:
                        message_text = message_data.get('message', '')
                        
                        if message_text:
                            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º get_or_create –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
                            message_obj, created = await sync_to_async(StreamerMessage.objects.get_or_create)(
                                streamer=streamer,
                                message=message_text,
                                defaults={'is_active': True}
                            )
                            if created:
                                total_messages += 1
                
                # –ü–æ–º–µ—á–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                streamer_messages = await sync_to_async(list)(streamer.messages.filter(is_active=True))
                for message in streamer_messages:
                    if message.streamer and message.streamer.status == 'inactive':
                        message.is_active = False
                        await sync_to_async(message.save)()
                        inactive_count += 1
            
            if total_messages > 0 or inactive_count > 0:
                logger.info(f"üí¨ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {len(active_streamers)} —Å—Ç—Ä–∏–º–µ—Ä–æ–≤, {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π, {inactive_count} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
            else:
                logger.info(f"üí¨ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(active_streamers)} —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ç—Ä–∏–º–µ—Ä–æ–≤: {e}")
            import traceback
            logger.error(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
    
    async def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã"""
        if self.session and not self.session.closed:
            await self.session.close()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
_supabase_sync_service = None

def get_supabase_sync_service():
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞"""
    global _supabase_sync_service
    if _supabase_sync_service is None:
        _supabase_sync_service = SupabaseSyncService()
    return _supabase_sync_service

async def run_sync_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    service = get_supabase_sync_service()
    await service.sync_streamer_statuses_async()
    await service.assign_users_to_streamers_async()
    await service.sync_streamer_messages_async() 