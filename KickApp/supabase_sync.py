#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Supabase
"""

import os
import aiohttp
import asyncio
import json
from datetime import datetime, timedelta
from django.utils import timezone
from django.contrib.auth import get_user_model
from asgiref.sync import sync_to_async
from .models import StreamerStatus, AutoResponse, StreamerMessage
from dotenv import load_dotenv
import logging
from .models import KickAccount, KickAccountAssignment

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

User = get_user_model()

class SupabaseSyncService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Supabase
    """
    
    def __init__(self):
        self.supabase_url = os.getenv("SUPABASE_URL", "").strip('"')
        self.supabase_key = os.getenv("SUPABASE_KEY", "").strip('"')
        
        if not self.supabase_url or not self.supabase_key:
            raise ValueError("SUPABASE_URL –∏ SUPABASE_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
        
        self.headers = {
            "apikey": self.supabase_key,
            "Authorization": f"Bearer {self.supabase_key}",
            "Content-Type": "application/json"
        }
        self.session = None
    
    async def _get_session(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç aiohttp —Å–µ—Å—Å–∏—é"""
        if self.session is None or self.session.closed:
            timeout = aiohttp.ClientTimeout(total=30)
            self.session = aiohttp.ClientSession(timeout=timeout, headers=self.headers)
        return self.session
    
    async def get_active_streamers_async(self):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ Supabase
        """
        try:
            session = await self._get_session()
            url = f"{self.supabase_url}/rest/v1/stream_status"
            params = {
                "status": "eq.active",
                "select": "order_id,vid,updated_at",
                "order": "updated_at.desc",
                "limit": "100"
            }
            
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ Supabase")
                    return data
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase: {response.status}")
                    return []
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
            return []
    
    async def sync_streamer_statuses_async(self):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å—ã —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ —Å Supabase
        """
        try:
            active_streamers = await self.get_active_streamers_async()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤
            existing_streamers = {s.vid: s for s in await sync_to_async(list)(StreamerStatus.objects.all())}
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤
            updated_count = 0
            inactive_count = 0
            
            for streamer_data in active_streamers:
                vid = streamer_data['vid']
                order_id = streamer_data['order_id']
                updated_at = streamer_data['updated_at']
                
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                streamer, created = await sync_to_async(StreamerStatus.objects.get_or_create)(
                    vid=vid,
                    defaults={
                        'status': 'active',
                        'order_id': order_id,
                        'last_updated': timezone.now()
                    }
                )
                
                if not created:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    streamer.status = 'active'
                    streamer.order_id = order_id
                    streamer.last_updated = timezone.now()
                    await sync_to_async(streamer.save)()
                
                updated_count += 1
            
            # –ü–æ–º–µ—á–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∏–º–µ—Ä—ã
            active_vids = {s['vid'] for s in active_streamers}
            for streamer in existing_streamers.values():
                if streamer.vid not in active_vids and streamer.status == 'active':
                    streamer.status = 'inactive'
                    await sync_to_async(streamer.save)()
                    inactive_count += 1
            
            logger.info(f"üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∏–º–µ—Ä–æ–≤: {updated_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö, {inactive_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤: {e}")
    
    async def assign_users_to_streamers_async(self):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç—Ä–∏–º–µ—Ä–∞–º –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            active_streamers = await sync_to_async(list)(StreamerStatus.objects.filter(
                status='active',
                assigned_user__isnull=True
            ))
            
            processed_count = 0
            
            for streamer in active_streamers:
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º —Å—Ç—Ä–∏–º–µ—Ä–∞
                user, created = await sync_to_async(User.objects.get_or_create)(
                    username=streamer.vid,
                    defaults={
                        'email': f"{streamer.vid}@auto.local",
                        'is_staff': False,
                        'is_superuser': False
                    }
                )
                
                # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å—Ç—Ä–∏–º–µ—Ä—É
                streamer.assigned_user = user
                await sync_to_async(streamer.save)()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (many-to-many)
                await self._add_accounts_to_user_async(user)
                
                processed_count += 1
            
            if processed_count > 0:
                logger.info(f"üë• –ù–∞–∑–Ω–∞—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {processed_count}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ —Å—Ç—Ä–∏–º–µ—Ä–∞–º: {e}")
    
    async def _add_accounts_to_user_async(self, user):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ many-to-many
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            active_accounts = await sync_to_async(list)(KickAccount.objects.filter(status='active'))
            
            if not active_accounts:
                logger.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
                return
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–∏–ª–∏ –º–µ–Ω—å—à–µ, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ)
            accounts_to_add = active_accounts[:10]
            
            added_count = 0
            for account in accounts_to_add:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                existing_assignment = await sync_to_async(KickAccountAssignment.objects.filter(
                    kick_account=account,
                    user=user
                ).exists)()
                
                if not existing_assignment:
                    # –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await sync_to_async(KickAccountAssignment.objects.create)(
                        kick_account=account,
                        user=user,
                        assigned_by=user,
                        assignment_type='admin_assigned',
                        is_active=True
                    )
                    added_count += 1
            
            if added_count > 0:
                logger.info(f"üîë –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}: {e}")
    
    async def get_messages_for_streamer_async(self, vid):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞ –∏–∑ Supabase
        """
        try:
            session = await self._get_session()
            url = f"{self.supabase_url}/rest/v1/streamer_messages"
            params = {
                "vid": f"eq.{vid}",
                "select": "vid,message"
            }
            
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    return data
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {vid}: HTTP {response.status} - {error_text}")
                    return []
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {vid}: {str(e)}")
            return []
    
    async def sync_streamer_messages_async(self):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ —Å Supabase
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤
            active_streamers = await sync_to_async(list)(StreamerStatus.objects.filter(status='active'))
            
            total_messages = 0
            inactive_count = 0
            
            for streamer in active_streamers:
                if not streamer:
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º vid —Å—Ç—Ä–∏–º–µ—Ä–∞
                streamer_vid = await sync_to_async(lambda: streamer.vid)()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞
                messages_data = await self.get_messages_for_streamer_async(streamer_vid)
                
                if messages_data:
                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                    for message_data in messages_data:
                        message_text = message_data.get('message', '')
                        
                        if message_text:
                            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                            message_obj, created = await sync_to_async(StreamerMessage.objects.get_or_create)(
                                streamer=streamer,
                                message=message_text,
                                defaults={
                                    'is_active': True
                                }
                            )
                            
                            if created:
                                total_messages += 1
                
                # –ü–æ–º–µ—á–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                streamer_messages = await sync_to_async(list)(streamer.messages.filter(is_active=True))
                for message in streamer_messages:
                    if message.streamer and message.streamer.status == 'inactive':
                        message.is_active = False
                        await sync_to_async(message.save)()
                        inactive_count += 1
            
            if total_messages > 0 or inactive_count > 0:
                logger.info(f"üí¨ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {len(active_streamers)} —Å—Ç—Ä–∏–º–µ—Ä–æ–≤, {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π, {inactive_count} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ç—Ä–∏–º–µ—Ä–æ–≤: {e}")
    
    async def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã"""
        if self.session and not self.session.closed:
            await self.session.close()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
_supabase_sync_service = None

def get_supabase_sync_service():
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞"""
    global _supabase_sync_service
    if _supabase_sync_service is None:
        _supabase_sync_service = SupabaseSyncService()
    return _supabase_sync_service

async def run_sync_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    service = get_supabase_sync_service()
    await service.sync_streamer_statuses_async()
    await service.assign_users_to_streamers_async()
    await service.sync_streamer_messages_async() 